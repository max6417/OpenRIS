"""
This file is a part of OpenRIS application. It contains all the code and custom validators to create and manage
each forms present inside the application.

Caution : All field or forms cannot have a custom validate function. All of this can be modified to fit the exact workflow of
the institution using the code.
"""

from flask_wtf import FlaskForm
from wtforms import StringField, SelectField, TextAreaField, IntegerField, validators
from wtforms.validators import ValidationError, DataRequired, Optional
from wtforms.fields import TelField, EmailField
import re
import pyorthanc
import config
from utils import MongoDBClient

client = MongoDBClient.MongoDBClient()
orthanc_client = pyorthanc.Orthanc(config.ORTHANC_SERVER)


# Use Orthanc server to get the modality connected to it
# All the AET connected to Orthanc should present as "modality(MRI, CT, etc)"_"name" for example MRI_station1

MODALITIES = set( modality.split('_')[0] for modality in set(orthanc_client.get_modalities()))
MODALITIES.discard("horos")
MODALITIES.discard("findscu")
MODALITIES.discard(config.ORTHANC_AET)


class BaseForm(FlaskForm):
    class Meta:
        csrf = False


class Order(BaseForm):
    """
    Order is the form to register a new order from the RIS application. It contains
        @ordering_physician_identifier: input-field for physician ID
        @ordering_physician_name: input-field for physician name
        @ordering_physician_surname: input-field for physician surname
        @placer_department: the "application"/department where the order is enter (just for debug, should be removed)
        @imaging_modality: a select field containing all the global modality connected in Orthanc
        @procedure: a select field containing the choice for a specific procedure linked with the modality chosen
        @add_note: an optional input field containing the reason to register the order (OBR.13 for ORM and OMI HL7 message)
        @slots: a select field containing all the available slots to book (manage by the Scheduler system)
    """
    ordering_physician_identifier = StringField("ID", validators=[DataRequired()])
    ordering_physician_name = StringField("Name", validators=[DataRequired()])
    ordering_physician_surname = StringField("Surname", validators=[DataRequired()])

    placer_department = StringField("Department", validators=[DataRequired()])

    # Imaging Request Information
    imaging_modality = SelectField(
        "Modality",
        choices=[(modality, modality) for modality in MODALITIES],
        render_kw={"style": "display:block"},
    )
    procedure = SelectField(
        "Procedure",
        choices=[],
        render_kw={"style": "display:block"},
        validate_choice=False    # Cannot validate choices because dynamically generated by other field (check documentation of wtforms)
    )
    add_note = TextAreaField("Note", validators=[validators.length(max=250), Optional()])

    slots = SelectField(
        "Slot",
        choices=[],
        render_kw={"style": "display:block"},
        validate_choice=False    # Cannot validate choices because dynamically generated by other field (check documentation of wtforms)
    )

    def validate_ordering_physician_identifier(self, field):
        """
        Validates the structure of the physician identifier field. Can be modified to fit with the current institution
        """
        if not bool(re.fullmatch(r'^[a-zA-Z0-9]+$', field.data)):
            raise ValidationError("Invalid ID")

    def validate_ordering_physician_name(self, field):
        """
        Validates the structure of the name field. Can be modified to fit with the current institution
        """
        if not bool(re.fullmatch(r'^[a-zA-Z\s\-\']+$', field.data)):
            raise ValidationError("Invalid name")

    def validate_ordering_physician_surname(self, field):
        """
        Validates the structure of the surname field. Can be modified with the current institution
        """
        if not bool(re.fullmatch(r'^[a-zA-Z\s\-\']+$', field.data)):
            raise ValidationError("Invalid name")

    def validate_placer_department(self, field):
        """
        Validates the structure of the department field. Can be modified with the current institution
        """
        if not bool(re.fullmatch(r'^[A-Z]+$', field.data)):
            raise ValidationError("Invalid department")


class PatientSearchForm(BaseForm):
    """
    The form used to search a patient in the patients page
        @patient_name: input-field for patient name (should contain an entire name)
        @patient_surname: input-field for patient surname (should contain an entire surname)
    """
    patient_name = StringField("Patient Name", validators=[Optional()])
    patient_surname = StringField("Patient Surname", validators=[Optional()])

    def validate_patient_name(self, field):
        """
        Validates the structure of the name field. Can be modified with the current institution
        """
        if not bool(re.fullmatch(r'^[a-zA-Z\s\-\']+$', field.data)):
            raise ValidationError('Patient Name incorrect format')

    def validate_patient_surname(self, field):
        """
        Validates the structure of the surname field. Can be modified with the current institution
        """
        if not bool(re.fullmatch(r'^[a-zA-Z\s\-\']+$', field.data)):
            raise ValidationError('Patient Surname incorrect format')


class PatientDemographics(BaseForm):
    """
    Form used to edit the patient demographic data :
        - Name
        - Surname
        - DOB
        - Sex
        - Phone Number
        - Email
        - Address + Code Postal + Complement + Country + City
        - Referring Physician : id + name + surname
    """
    patient_name = StringField("Patient Name", validators=[DataRequired()])
    patient_surname = StringField("Patient Surname", validators=[DataRequired()])
    patient_dob = StringField("Date of Birth", validators=[DataRequired()], render_kw={"type": "text", "placeholder": "yyyy-mm-dd"})
    patient_sex = SelectField(
        "Sex",
        choices=[("F", "F"), ("M", "M"), ("O", "O"), ("U", "U")],
        render_kw={"style": "display:block"}
    )
    patient_phone_number = TelField("Phone Number", validators=[Optional()])
    patient_email = EmailField("Email Address", validators=[Optional()])
    patient_address = StringField("Address", validators=[Optional()])
    patient_address_complement = StringField("Complement", validators=[Optional()])
    patient_zip_code = StringField("Zip Code", validators=[Optional()])
    patient_city = StringField("City", validators=[Optional()])
    patient_country = StringField("Country", validators=[Optional()])
    patient_referring_physician_id = StringField("Referring Physician", validators=[Optional()])
    patient_referring_physician_name = StringField("Referring Physician Name", validators=[Optional()])
    patient_referring_physician_surname = StringField("Referring Physician Surname", validators=[Optional()])

    def validate_patient_name(self, field):
        """
        Validates the structure of the name field. Can be modified with the current institution
        """
        if not bool(re.fullmatch(r'^[a-zA-Z\s\-\']+$', field.data)):
            raise ValidationError("Patient name doesn't fit the pattern")

    def validate_patient_surname(self, field):
        """
        Validates the structure of the surname field. Can be modified with the current institution
        """
        if not bool(re.fullmatch(r'^[a-zA-Z\s\-\']+$', field.data)):
            raise ValidationError("Patient surname doesn't fit the pattern")

    def validate_patient_dob(self, field):
        """
        Validates the structure of the dob field. Can be modified with the current institution
        """
        if not bool(re.fullmatch(r'^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$', field.data)):
            raise ValidationError("date is not in the right format")

    def validate_phone_number(self, field):
        """
        Validates the structure of the phone number field. Can be modified with the current institution
        """
        if not bool(re.fullmatch(r'^\d{9}$', field.data)):
            raise ValidationError("This is not a valid ")

    def validate_email(self, field):
        """
        Validates the structure of the email field. Can be modified with the current institution
        """
        if not bool(re.fullmatch(r'^[a-z0-9]+@[a-z0-9]+\.[a-z]+$', field.data.lower())):
            raise ValidationError("email is not in the right format")

    def validate_zip_code(self, field):
        pass


class NewProcedureForm(BaseForm):
    """
    Form to add a new procedure in the radiology information system. A procedure needs :
        - A name : from the SNOMED CT browser
        - An _id : from the SNOMED CT browser -> just the ID/ code from SNOMED CT
        - A duration : to be manually selected
        - An imaging modality : using the code presented by the system
    """
    procedure_name = StringField("Procedure Name", validators=[DataRequired(), validators.length(max=100)])
    procedure_id = StringField("SNOMED CT ID", validators=[DataRequired()])
    procedure_duration = IntegerField("Procedure Duration",
                                      validators=[DataRequired(), validators.NumberRange(min=10, max=120)],
                                      render_kw={"placeholder": "[10-120]min."}
                                      )
    procedure_modality = SelectField(
        "Modality",
        choices=[(modality, modality) for modality in MODALITIES],
        render_kw={"style": "display:block"}
    )

    def validate_procedure_id(self, field):
        """
        Validates the procedure id field. Can be modified with the current institution. By default it is only number
        but this should follow the SNOMED nomenclature to remain interoperable
        """
        if not bool(re.fullmatch(r'^[0-9]+$', field.data)):
            raise ValidationError("Procedure ID doesn't fit the SNOMED CT identifier pattern")

    def validate_procedure_duration(self, field):
        """

        """
        pass    # No need since the field already ensures the containment of the duration between [10, 120]

    def validate_procedure_modality(self, field):
        pass    # No need since the field is simply a select

    def validate_procedure_name(self, field):
        """
        Validates the procedure name field. Can be modified with the current institution
        """
        if not bool(re.fullmatch(r'^[a-zA-Z\s\-\']+$', field.data)):
            raise ValidationError("Procedure name doesn't fit the pattern")


class NewReport(BaseForm):
    """
    Form to add a new report in the RIS system. A report needs :
        - A name: corresponds of the radiologist's name
        - A surname: corresponds of the radiologist's surname
        - Impressions: corresponds of the radiologist's impressions at the end of the examination
        - Findings: corresponds of the radiologist's findings on which impressions were found
        - Recommendations: corresponds of the radiologist's recommendations at the end of the examination
    """
    impressions = TextAreaField("Impressions Section", render_kw={"class": "materialize-textarea", "placeholder": "Cannot Exceed 500 words"} , validators=[DataRequired()])
    findings = TextAreaField("Findings Section", render_kw={"class": "materialize-textarea", "placeholder": "Cannot Exceed 500 words"}, validators=[DataRequired()])
    recommendations = TextAreaField("Recommendations", render_kw={"class": "materialize-textarea"}, validators=[DataRequired()])
    surname = StringField("Surname", validators=[DataRequired()])
    name = StringField("Name", validators=[DataRequired()])

    def validate_surname(self, field):
        """
        Validates the surname field. Can be modified with the current institution
        """
        if not bool(re.fullmatch(r'^[a-zA-Z\s\-\']+$', field.data)):
            raise ValidationError("Surname doesn't fit the pattern")

    def validate_name(self, field):
        """
        Validates the name field. Can be modified with the current institution
        """
        if not bool(re.fullmatch(r'^[a-zA-Z\s\-\']+$', field.data)):
            raise ValidationError("Name doesn't fit the pattern")

    def validate_impressions(self, field):
        """
        Validates the impressions field. Can be modified with the current institution, but it follows the rule to be used
        by RadGraph-XL model (limit of word it can take into account)
        """
        if len(field.data.strip().split(" ")) >= 500:
            raise ValidationError("Impressions section must be less than 500 words")

    def validate_findings(self, field):
        """
        Validates the finding field. Can be modified with the current institution, but it follows the rule to be used
        by RadGraph-XL model (limit of word it can take into account)
        """
        if len(field.data.strip().split(" ")) >= 500:
            raise ValidationError("Findings section must be less than 500 words")


class SearchSpecificReport(BaseForm):
    """
    Same as PatientSearch but for report searching
    """
    section_find = SelectField(
        choices=[("findings", "findings"), ("impressions", "impressions")],
        render_kw={"style": "display:block"}
    )
    select_presence = SelectField(
        choices=[("definitely present", "definitely present"), ("definitely absent", "definitely absent"), ("uncertain", "uncertain")],
        render_kw={"style": "display:block"}
    )
    observation = StringField("Observation", validators=[Optional()])

    def validate_observation(self, field):
        """
        Validates the observation field.
        """
        if not bool(re.fullmatch(r'^[a-zA-Z\s\-\']+$', field.data)):
            raise ValidationError('Patient Name incorrect format')