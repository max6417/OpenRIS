"""
This file contains the code related with the RadGraph-XL model of NER to annotate the reports generated by the RIS +
the post-processing to keep relevant information.
"""
from radgraph import RadGraph
from radgraph import get_radgraph_processed_annotations
from typing import Any


class NERModel():

    def __init__(self, model_type="modern-radgraph-xl"):
        self.model_rad = RadGraph(model_type=model_type)

    def annotate_report(self, report: str):
        return self.model_rad([report])

    def process_annotation(self, annotations: dict) -> dict[str, list | dict[str, Any]]:
        return get_radgraph_processed_annotations(annotations)

    def process_data(self, report: str) -> tuple[list, dict[str, list | dict[str, Any]]]:
        """
        Function that postprocess the data annotated by the model. This function can be modified to postprocess more or
        less the output of the model. Currently, the function doesn't take the observation for which we do not know the
        localisation and the presence is uncertain.
        """
        processed_annotations = self.process_annotation(self.annotate_report(report))
        res = list()
        for annotation in processed_annotations["processed_annotations"]:
            tmp = dict()
            if annotation.get("tags", None) is not None and (annotation.get("tags", None) != "uncertain" or annotation.get("located_at", "unknown") != "unknown"):
                tmp['observation'] = annotation.get("observation", "").lower()
                tmp['located_at'] = annotation.get("located_at", "unknown")
                tmp['tags'] = annotation.get("tags", ['unknown'])[0].lower()
                res.append(tmp)
        return res, processed_annotations

